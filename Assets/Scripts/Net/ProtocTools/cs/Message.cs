// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Proto {

  #region Enums
  public enum EntityType {
    Character = 0,
    Monster = 1,
    Npc = 2,
    Item = 3,
    Gate = 4,
  }

  /// <summary>
  /// 实体状态
  /// </summary>
  public enum EntityState {
    None = 0,
    Idle = 1,
    Move = 2,
    Jump = 3,
  }

  public enum UnitState {
    Free = 0,
    Dead = 1,
    Rest = 2,
    Fight = 3,
    Max = 4,
  }

  /// <summary>
  ///伤害类型
  /// </summary>
  public enum DamageType {
    /// <summary>
    /// 默认值，表示未知或未设置
    /// </summary>
    Unknown = 0,
    /// <summary>
    /// 物理伤害
    /// </summary>
    Physical = 1,
    /// <summary>
    /// 魔法伤害
    /// </summary>
    Magical = 2,
    /// <summary>
    /// 真实伤害，通常不受任何防御属性影响
    /// </summary>
    Real = 3,
  }

  /// <summary>
  ///技能施放结果
  /// </summary>
  public enum CastResult {
    /// <summary>
    ///成功
    /// </summary>
    Success = 0,
    /// <summary>
    ///被动技能
    /// </summary>
    IsPassive = 1,
    /// <summary>
    ///MP不足
    /// </summary>
    MpLack = 2,
    /// <summary>
    ///Entity已经死亡
    /// </summary>
    EntityDead = 3,
    /// <summary>
    ///超出范围
    /// </summary>
    OutOfRange = 5,
    /// <summary>
    ///进行中
    /// </summary>
    Running = 6,
    /// <summary>
    ///冷却中
    /// </summary>
    Cooldown = 7,
    /// <summary>
    ///目标错误
    /// </summary>
    TargetError = 8,
  }

  #endregion

  #region Messages
  public sealed class HeartBeatRequest : pb::IMessage {
    private static readonly pb::MessageParser<HeartBeatRequest> _parser = new pb::MessageParser<HeartBeatRequest>(() => new HeartBeatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class HeartBeatResponse : pb::IMessage {
    private static readonly pb::MessageParser<HeartBeatResponse> _parser = new pb::MessageParser<HeartBeatResponse>(() => new HeartBeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ACK报文
  /// </summary>
  public sealed class ACKRequest : pb::IMessage {
    private static readonly pb::MessageParser<ACKRequest> _parser = new pb::MessageParser<ACKRequest>(() => new ACKRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACKRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class ACKResponse : pb::IMessage {
    private static readonly pb::MessageParser<ACKResponse> _parser = new pb::MessageParser<ACKResponse>(() => new ACKResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACKResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 用于网络传输的三维向量
  /// </summary>
  public sealed class Vec3 : pb::IMessage {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private long x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private long y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private long z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(X);
      }
      if (Y != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Y);
      }
      if (Z != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(X);
      }
      if (Y != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Y);
      }
      if (Z != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt64();
            break;
          }
          case 16: {
            Y = input.ReadInt64();
            break;
          }
          case 24: {
            Z = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 实体信息
  /// </summary>
  public sealed class NetEntity : pb::IMessage {
    private static readonly pb::MessageParser<NetEntity> _parser = new pb::MessageParser<NetEntity>(() => new NetEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetEntity> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::Proto.Vec3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vec3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vec3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (direction_ == null) {
              direction_ = new global::Proto.Vec3();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色信息
  /// </summary>
  public sealed class NetActor : pb::IMessage {
    private static readonly pb::MessageParser<NetActor> _parser = new pb::MessageParser<NetActor>(() => new NetActor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetActor> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    /// <summary>
    ///单位类型=职业=TID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private long exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "spaceId" field.</summary>
    public const int SpaceIdFieldNumber = 7;
    private int spaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceId {
      get { return spaceId_; }
      set {
        spaceId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 8;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 9;
    private global::Proto.NetEntity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 10;
    private float hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 11;
    private float mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 12;
    private global::Proto.EntityType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EntityType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Skills" field.</summary>
    public const int SkillsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Proto.SkillInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(106, global::Proto.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.SkillInfo> skills_ = new pbc::RepeatedField<global::Proto.SkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.SkillInfo> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "equipsInfo" field.</summary>
    public const int EquipsInfoFieldNumber = 16;
    private global::Proto.InventoryInfo equipsInfo_;
    /// <summary>
    ///InventoryInfo knapsackInfo = 14; 	//背包
    ///InventoryInfo warehouseInfo = 15; 	//仓库
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.InventoryInfo EquipsInfo {
      get { return equipsInfo_; }
      set {
        equipsInfo_ = value;
      }
    }

    /// <summary>Field number for the "itemInfo" field.</summary>
    public const int ItemInfoFieldNumber = 17;
    private global::Proto.ItemInfo itemInfo_;
    /// <summary>
    ///物品实体专用属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ItemInfo ItemInfo {
      get { return itemInfo_; }
      set {
        itemInfo_ = value;
      }
    }

    /// <summary>Field number for the "hpmax" field.</summary>
    public const int HpmaxFieldNumber = 18;
    private float hpmax_;
    /// <summary>
    ///生命上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hpmax {
      get { return hpmax_; }
      set {
        hpmax_ = value;
      }
    }

    /// <summary>Field number for the "mpmax" field.</summary>
    public const int MpmaxFieldNumber = 19;
    private float mpmax_;
    /// <summary>
    ///法力上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mpmax {
      get { return mpmax_; }
      set {
        mpmax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Exp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Exp);
      }
      if (SpaceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpaceId);
      }
      if (Gold != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Gold);
      }
      if (entity_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Entity);
      }
      if (Hp != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Hp);
      }
      if (Mp != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Mp);
      }
      if (Type != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Type);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (equipsInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EquipsInfo);
      }
      if (itemInfo_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ItemInfo);
      }
      if (Hpmax != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Hpmax);
      }
      if (Mpmax != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Mpmax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (SpaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceId);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (Hp != 0F) {
        size += 1 + 4;
      }
      if (Mp != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (equipsInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EquipsInfo);
      }
      if (itemInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemInfo);
      }
      if (Hpmax != 0F) {
        size += 2 + 4;
      }
      if (Mpmax != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Exp = input.ReadInt64();
            break;
          }
          case 56: {
            SpaceId = input.ReadInt32();
            break;
          }
          case 64: {
            Gold = input.ReadInt64();
            break;
          }
          case 74: {
            if (entity_ == null) {
              entity_ = new global::Proto.NetEntity();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 85: {
            Hp = input.ReadFloat();
            break;
          }
          case 93: {
            Mp = input.ReadFloat();
            break;
          }
          case 96: {
            type_ = (global::Proto.EntityType) input.ReadEnum();
            break;
          }
          case 106: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 130: {
            if (equipsInfo_ == null) {
              equipsInfo_ = new global::Proto.InventoryInfo();
            }
            input.ReadMessage(equipsInfo_);
            break;
          }
          case 138: {
            if (itemInfo_ == null) {
              itemInfo_ = new global::Proto.ItemInfo();
            }
            input.ReadMessage(itemInfo_);
            break;
          }
          case 149: {
            Hpmax = input.ReadFloat();
            break;
          }
          case 157: {
            Mpmax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class PropertyUpdate : pb::IMessage {
    private static readonly pb::MessageParser<PropertyUpdate> _parser = new pb::MessageParser<PropertyUpdate>(() => new PropertyUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 2;
    private global::Proto.PropertyUpdate.Types.Property property_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PropertyUpdate.Types.Property Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "oldValue" field.</summary>
    public const int OldValueFieldNumber = 3;
    private global::Proto.PropertyUpdate.Types.PropertyValue oldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PropertyUpdate.Types.PropertyValue OldValue {
      get { return oldValue_; }
      set {
        oldValue_ = value;
      }
    }

    /// <summary>Field number for the "newValue" field.</summary>
    public const int NewValueFieldNumber = 4;
    private global::Proto.PropertyUpdate.Types.PropertyValue newValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PropertyUpdate.Types.PropertyValue NewValue {
      get { return newValue_; }
      set {
        newValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (Property != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Property);
      }
      if (oldValue_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OldValue);
      }
      if (newValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NewValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (Property != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Property);
      }
      if (oldValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldValue);
      }
      if (newValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            property_ = (global::Proto.PropertyUpdate.Types.Property) input.ReadEnum();
            break;
          }
          case 26: {
            if (oldValue_ == null) {
              oldValue_ = new global::Proto.PropertyUpdate.Types.PropertyValue();
            }
            input.ReadMessage(oldValue_);
            break;
          }
          case 34: {
            if (newValue_ == null) {
              newValue_ = new global::Proto.PropertyUpdate.Types.PropertyValue();
            }
            input.ReadMessage(newValue_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PropertyUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum Property {
        /// <summary>
        ///生命
        /// </summary>
        Hp = 0,
        /// <summary>
        ///法力
        /// </summary>
        Mp = 1,
        /// <summary>
        ///生命上限
        /// </summary>
        Hpmax = 2,
        /// <summary>
        ///法力上限
        /// </summary>
        Mpmax = 3,
        /// <summary>
        ///状态
        /// </summary>
        State = 4,
        /// <summary>
        ///等级
        /// </summary>
        Level = 5,
        /// <summary>
        ///名字
        /// </summary>
        Name = 6,
        /// <summary>
        ///金币
        /// </summary>
        Golds = 7,
        /// <summary>
        ///经验
        /// </summary>
        Exp = 8,
        /// <summary>
        ///活力
        /// </summary>
        Energy = 9,
      }

      public sealed class PropertyValue : pb::IMessage {
        private static readonly pb::MessageParser<PropertyValue> _parser = new pb::MessageParser<PropertyValue>(() => new PropertyValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PropertyValue> Parser { get { return _parser; } }

        /// <summary>Field number for the "int_value" field.</summary>
        public const int IntValueFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntValue {
          get { return valueCase_ == ValueOneofCase.IntValue ? (int) value_ : 0; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.IntValue;
          }
        }

        /// <summary>Field number for the "float_value" field.</summary>
        public const int FloatValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FloatValue {
          get { return valueCase_ == ValueOneofCase.FloatValue ? (float) value_ : 0F; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.FloatValue;
          }
        }

        /// <summary>Field number for the "string_value" field.</summary>
        public const int StringValueFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            valueCase_ = ValueOneofCase.StringValue;
          }
        }

        /// <summary>Field number for the "state_value" field.</summary>
        public const int StateValueFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.UnitState StateValue {
          get { return valueCase_ == ValueOneofCase.StateValue ? (global::Proto.UnitState) value_ : 0; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.StateValue;
          }
        }

        /// <summary>Field number for the "long_value" field.</summary>
        public const int LongValueFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongValue {
          get { return valueCase_ == ValueOneofCase.LongValue ? (long) value_ : 0L; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.LongValue;
          }
        }

        private object value_;
        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase {
          None = 0,
          IntValue = 1,
          FloatValue = 2,
          StringValue = 3,
          StateValue = 4,
          LongValue = 5,
        }
        private ValueOneofCase valueCase_ = ValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase {
          get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          valueCase_ = ValueOneofCase.None;
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (valueCase_ == ValueOneofCase.IntValue) {
            output.WriteRawTag(8);
            output.WriteInt32(IntValue);
          }
          if (valueCase_ == ValueOneofCase.FloatValue) {
            output.WriteRawTag(21);
            output.WriteFloat(FloatValue);
          }
          if (valueCase_ == ValueOneofCase.StringValue) {
            output.WriteRawTag(26);
            output.WriteString(StringValue);
          }
          if (valueCase_ == ValueOneofCase.StateValue) {
            output.WriteRawTag(32);
            output.WriteEnum((int) StateValue);
          }
          if (valueCase_ == ValueOneofCase.LongValue) {
            output.WriteRawTag(40);
            output.WriteInt64(LongValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (valueCase_ == ValueOneofCase.IntValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
          }
          if (valueCase_ == ValueOneofCase.FloatValue) {
            size += 1 + 4;
          }
          if (valueCase_ == ValueOneofCase.StringValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (valueCase_ == ValueOneofCase.StateValue) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateValue);
          }
          if (valueCase_ == ValueOneofCase.LongValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                IntValue = input.ReadInt32();
                break;
              }
              case 21: {
                FloatValue = input.ReadFloat();
                break;
              }
              case 26: {
                StringValue = input.ReadString();
                break;
              }
              case 32: {
                value_ = input.ReadEnum();
                valueCase_ = ValueOneofCase.StateValue;
                break;
              }
              case 40: {
                LongValue = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class PropertyUpdateResponse : pb::IMessage {
    private static readonly pb::MessageParser<PropertyUpdateResponse> _parser = new pb::MessageParser<PropertyUpdateResponse>(() => new PropertyUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyUpdateResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PropertyUpdate> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PropertyUpdate.Parser);
    private readonly pbc::RepeatedField<global::Proto.PropertyUpdate> list_ = new pbc::RepeatedField<global::Proto.PropertyUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PropertyUpdate> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///伤害数据
  /// </summary>
  public sealed class Damage : pb::IMessage {
    private static readonly pb::MessageParser<Damage> _parser = new pb::MessageParser<Damage>(() => new Damage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Damage> Parser { get { return _parser; } }

    /// <summary>Field number for the "attackerId" field.</summary>
    public const int AttackerIdFieldNumber = 1;
    private int attackerId_;
    /// <summary>
    /// 攻击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private int targetId_;
    /// <summary>
    /// 被攻击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    /// <summary>
    /// 技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private float amount_;
    /// <summary>
    /// 伤害数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 5;
    private global::Proto.DamageType damageType_ = 0;
    /// <summary>
    /// 伤害类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DamageType DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "isCrit" field.</summary>
    public const int IsCritFieldNumber = 6;
    private bool isCrit_;
    /// <summary>
    /// 是否暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    /// <summary>Field number for the "isMiss" field.</summary>
    public const int IsMissFieldNumber = 7;
    private bool isMiss_;
    /// <summary>
    /// 是否miss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMiss {
      get { return isMiss_; }
      set {
        isMiss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (Amount != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Amount);
      }
      if (DamageType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DamageType);
      }
      if (IsCrit != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCrit);
      }
      if (IsMiss != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsMiss);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Amount != 0F) {
        size += 1 + 4;
      }
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DamageType);
      }
      if (IsCrit != false) {
        size += 1 + 1;
      }
      if (IsMiss != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttackerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 37: {
            Amount = input.ReadFloat();
            break;
          }
          case 40: {
            damageType_ = (global::Proto.DamageType) input.ReadEnum();
            break;
          }
          case 48: {
            IsCrit = input.ReadBool();
            break;
          }
          case 56: {
            IsMiss = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知客户端有人受到伤害
  /// </summary>
  public sealed class DamageResponse : pb::IMessage {
    private static readonly pb::MessageParser<DamageResponse> _parser = new pb::MessageParser<DamageResponse>(() => new DamageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Damage> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Damage.Parser);
    private readonly pbc::RepeatedField<global::Proto.Damage> list_ = new pbc::RepeatedField<global::Proto.Damage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Damage> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天请求
  /// </summary>
  public sealed class ChatRequest : pb::IMessage {
    private static readonly pb::MessageParser<ChatRequest> _parser = new pb::MessageParser<ChatRequest>(() => new ChatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "text_value" field.</summary>
    public const int TextValueFieldNumber = 1;
    private string textValue_ = "";
    /// <summary>
    ///消息文本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TextValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TextValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天响应
  /// </summary>
  public sealed class ChatResponse : pb::IMessage {
    private static readonly pb::MessageParser<ChatResponse> _parser = new pb::MessageParser<ChatResponse>(() => new ChatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private int senderId_;
    /// <summary>
    ///发送者entityID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "text_value" field.</summary>
    public const int TextValueFieldNumber = 2;
    private string textValue_ = "";
    /// <summary>
    ///消息文本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SenderId);
      }
      if (TextValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TextValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SenderId = input.ReadInt32();
            break;
          }
          case 18: {
            TextValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 技能信息
  /// </summary>
  public sealed class SkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///施法信息
  /// </summary>
  public sealed class CastInfo : pb::IMessage {
    private static readonly pb::MessageParser<CastInfo> _parser = new pb::MessageParser<CastInfo>(() => new CastInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CastInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "casterId" field.</summary>
    public const int CasterIdFieldNumber = 1;
    private int casterId_;
    /// <summary>
    ///施法者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterId {
      get { return casterId_; }
      set {
        casterId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private int targetId_;
    /// <summary>
    ///技能施放单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetLoc" field.</summary>
    public const int TargetLocFieldNumber = 4;
    private global::Proto.Vec3 targetLoc_;
    /// <summary>
    ///技能施放点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vec3 TargetLoc {
      get { return targetLoc_; }
      set {
        targetLoc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CasterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CasterId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetId);
      }
      if (targetLoc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TargetLoc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CasterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (targetLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetLoc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CasterId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetId = input.ReadInt32();
            break;
          }
          case 34: {
            if (targetLoc_ == null) {
              targetLoc_ = new global::Proto.Vec3();
            }
            input.ReadMessage(targetLoc_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///施放请求
  /// </summary>
  public sealed class SpellRequest : pb::IMessage {
    private static readonly pb::MessageParser<SpellRequest> _parser = new pb::MessageParser<SpellRequest>(() => new SpellRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpellRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Proto.CastInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.CastInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Proto.CastInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能施放错误（只有施法玩家才会收到）
  /// </summary>
  public sealed class SpellFailResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpellFailResponse> _parser = new pb::MessageParser<SpellFailResponse>(() => new SpellFailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpellFailResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "casterId" field.</summary>
    public const int CasterIdFieldNumber = 1;
    private int casterId_;
    /// <summary>
    ///施法者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterId {
      get { return casterId_; }
      set {
        casterId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private global::Proto.CastResult reason_ = 0;
    /// <summary>
    ///失败原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.CastResult Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CasterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CasterId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (Reason != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CasterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CasterId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            reason_ = (global::Proto.CastResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知客户端执行技能
  /// </summary>
  public sealed class SpellResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpellResponse> _parser = new pb::MessageParser<SpellResponse>(() => new SpellResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpellResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "castList" field.</summary>
    public const int CastListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.CastInfo> _repeated_castList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.CastInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.CastInfo> castList_ = new pbc::RepeatedField<global::Proto.CastInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.CastInfo> CastList {
      get { return castList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      castList_.WriteTo(output, _repeated_castList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += castList_.CalculateSize(_repeated_castList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            castList_.AddEntriesFrom(input, _repeated_castList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求复活
  /// </summary>
  public sealed class ReviveRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReviveRequest> _parser = new pb::MessageParser<ReviveRequest>(() => new ReviveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReviveRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色进入场景
  /// </summary>
  public sealed class SpaceEnterResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpaceEnterResponse> _parser = new pb::MessageParser<SpaceEnterResponse>(() => new SpaceEnterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceEnterResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private global::Proto.NetActor character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetActor Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.NetActor> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.NetActor.Parser);
    private readonly pbc::RepeatedField<global::Proto.NetActor> list_ = new pbc::RepeatedField<global::Proto.NetActor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.NetActor> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (character_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Character);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (character_ == null) {
              character_ = new global::Proto.NetActor();
            }
            input.ReadMessage(character_);
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class NetEntitySync : pb::IMessage {
    private static readonly pb::MessageParser<NetEntitySync> _parser = new pb::MessageParser<NetEntitySync>(() => new NetEntitySync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetEntitySync> Parser { get { return _parser; } }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Proto.NetEntity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Proto.EntityState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EntityState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 3;
    private bool force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (Force != false) {
        output.WriteRawTag(24);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entity_ == null) {
              entity_ = new global::Proto.NetEntity();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 16: {
            state_ = (global::Proto.EntityState) input.ReadEnum();
            break;
          }
          case 24: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class SpaceEntitySyncRequest : pb::IMessage {
    private static readonly pb::MessageParser<SpaceEntitySyncRequest> _parser = new pb::MessageParser<SpaceEntitySyncRequest>(() => new SpaceEntitySyncRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceEntitySyncRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entitySync" field.</summary>
    public const int EntitySyncFieldNumber = 1;
    private global::Proto.NetEntitySync entitySync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntitySync EntitySync {
      get { return entitySync_; }
      set {
        entitySync_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entitySync_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntitySync);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entitySync_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntitySync);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entitySync_ == null) {
              entitySync_ = new global::Proto.NetEntitySync();
            }
            input.ReadMessage(entitySync_);
            break;
          }
        }
      }
    }

  }

  public sealed class SpaceEntitySyncResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpaceEntitySyncResponse> _parser = new pb::MessageParser<SpaceEntitySyncResponse>(() => new SpaceEntitySyncResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceEntitySyncResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "entitySync" field.</summary>
    public const int EntitySyncFieldNumber = 1;
    private global::Proto.NetEntitySync entitySync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntitySync EntitySync {
      get { return entitySync_; }
      set {
        entitySync_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entitySync_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntitySync);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entitySync_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntitySync);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entitySync_ == null) {
              entitySync_ = new global::Proto.NetEntitySync();
            }
            input.ReadMessage(entitySync_);
            break;
          }
        }
      }
    }

  }

  public sealed class GameEnterRequest : pb::IMessage {
    private static readonly pb::MessageParser<GameEnterRequest> _parser = new pb::MessageParser<GameEnterRequest>(() => new GameEnterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEnterRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "characterId" field.</summary>
    public const int CharacterIdFieldNumber = 1;
    private int characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入游戏的响应
  /// </summary>
  public sealed class GameEnterResponse : pb::IMessage {
    private static readonly pb::MessageParser<GameEnterResponse> _parser = new pb::MessageParser<GameEnterResponse>(() => new GameEnterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEnterResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 2;
    private global::Proto.NetEntity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 3;
    private global::Proto.NetActor character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetActor Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (entity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Entity);
      }
      if (character_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Character);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (entity_ == null) {
              entity_ = new global::Proto.NetEntity();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 26: {
            if (character_ == null) {
              character_ = new global::Proto.NetActor();
            }
            input.ReadMessage(character_);
            break;
          }
        }
      }
    }

  }

  public sealed class SpaceCharactersEnterResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpaceCharactersEnterResponse> _parser = new pb::MessageParser<SpaceCharactersEnterResponse>(() => new SpaceCharactersEnterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceCharactersEnterResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "spaceId" field.</summary>
    public const int SpaceIdFieldNumber = 1;
    private int spaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceId {
      get { return spaceId_; }
      set {
        spaceId_ = value;
      }
    }

    /// <summary>Field number for the "characterList" field.</summary>
    public const int CharacterListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.NetActor> _repeated_characterList_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.NetActor.Parser);
    private readonly pbc::RepeatedField<global::Proto.NetActor> characterList_ = new pbc::RepeatedField<global::Proto.NetActor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.NetActor> CharacterList {
      get { return characterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpaceId);
      }
      characterList_.WriteTo(output, _repeated_characterList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceId);
      }
      size += characterList_.CalculateSize(_repeated_characterList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpaceId = input.ReadInt32();
            break;
          }
          case 18: {
            characterList_.AddEntriesFrom(input, _repeated_characterList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SpaceCharacterLeaveResponse : pb::IMessage {
    private static readonly pb::MessageParser<SpaceCharacterLeaveResponse> _parser = new pb::MessageParser<SpaceCharacterLeaveResponse>(() => new SpaceCharacterLeaveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceCharacterLeaveResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UserRegisterRequest : pb::IMessage {
    private static readonly pb::MessageParser<UserRegisterRequest> _parser = new pb::MessageParser<UserRegisterRequest>(() => new UserRegisterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRegisterRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UserRegisterResponse : pb::IMessage {
    private static readonly pb::MessageParser<UserRegisterResponse> _parser = new pb::MessageParser<UserRegisterResponse>(() => new UserRegisterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRegisterResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UserLoginRequest : pb::IMessage {
    private static readonly pb::MessageParser<UserLoginRequest> _parser = new pb::MessageParser<UserLoginRequest>(() => new UserLoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UserLoginResponse : pb::IMessage {
    private static readonly pb::MessageParser<UserLoginResponse> _parser = new pb::MessageParser<UserLoginResponse>(() => new UserLoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EntitySyncResponse : pb::IMessage {
    private static readonly pb::MessageParser<EntitySyncResponse> _parser = new pb::MessageParser<EntitySyncResponse>(() => new EntitySyncResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntitySyncResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityList" field.</summary>
    public const int EntityListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.NetEntity> _repeated_entityList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.NetEntity.Parser);
    private readonly pbc::RepeatedField<global::Proto.NetEntity> entityList_ = new pbc::RepeatedField<global::Proto.NetEntity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.NetEntity> EntityList {
      get { return entityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entityList_.WriteTo(output, _repeated_entityList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entityList_.CalculateSize(_repeated_entityList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entityList_.AddEntriesFrom(input, _repeated_entityList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EntityEnterResponse : pb::IMessage {
    private static readonly pb::MessageParser<EntityEnterResponse> _parser = new pb::MessageParser<EntityEnterResponse>(() => new EntityEnterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityEnterResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Proto.NetEntity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetEntity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entity_ == null) {
              entity_ = new global::Proto.NetEntity();
            }
            input.ReadMessage(entity_);
            break;
          }
        }
      }
    }

  }

  public sealed class CharacterCreateRequest : pb::IMessage {
    private static readonly pb::MessageParser<CharacterCreateRequest> _parser = new pb::MessageParser<CharacterCreateRequest>(() => new CharacterCreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterCreateRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jobType" field.</summary>
    public const int JobTypeFieldNumber = 2;
    private int jobType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (JobType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JobType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            JobType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色的响应
  /// </summary>
  public sealed class ChracterCreateResponse : pb::IMessage {
    private static readonly pb::MessageParser<ChracterCreateResponse> _parser = new pb::MessageParser<ChracterCreateResponse>(() => new ChracterCreateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChracterCreateResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 3;
    private global::Proto.NetActor character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NetActor Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (character_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Character);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (character_ == null) {
              character_ = new global::Proto.NetActor();
            }
            input.ReadMessage(character_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询角色列表的请求
  /// </summary>
  public sealed class CharacterListRequest : pb::IMessage {
    private static readonly pb::MessageParser<CharacterListRequest> _parser = new pb::MessageParser<CharacterListRequest>(() => new CharacterListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 角色列表的响应
  /// </summary>
  public sealed class CharacterListResponse : pb::IMessage {
    private static readonly pb::MessageParser<CharacterListResponse> _parser = new pb::MessageParser<CharacterListResponse>(() => new CharacterListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "characterList" field.</summary>
    public const int CharacterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.NetActor> _repeated_characterList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.NetActor.Parser);
    private readonly pbc::RepeatedField<global::Proto.NetActor> characterList_ = new pbc::RepeatedField<global::Proto.NetActor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.NetActor> CharacterList {
      get { return characterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      characterList_.WriteTo(output, _repeated_characterList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += characterList_.CalculateSize(_repeated_characterList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            characterList_.AddEntriesFrom(input, _repeated_characterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除角色的请求
  /// </summary>
  public sealed class CharacterDeleteRequest : pb::IMessage {
    private static readonly pb::MessageParser<CharacterDeleteRequest> _parser = new pb::MessageParser<CharacterDeleteRequest>(() => new CharacterDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterDeleteRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "characterId" field.</summary>
    public const int CharacterIdFieldNumber = 1;
    private int characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除角色的响应
  /// </summary>
  public sealed class CharacterDeleteResponse : pb::IMessage {
    private static readonly pb::MessageParser<CharacterDeleteResponse> _parser = new pb::MessageParser<CharacterDeleteResponse>(() => new CharacterDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterDeleteResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品信息
  /// </summary>
  public sealed class ItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    /// <summary>
    ///物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    ///所处位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品更新
  /// </summary>
  public sealed class ItemUpdate : pb::IMessage {
    private static readonly pb::MessageParser<ItemUpdate> _parser = new pb::MessageParser<ItemUpdate>(() => new ItemUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.ItemUpdate.Types.UpdateType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ItemUpdate.Types.UpdateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Proto.ItemInfo item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ItemInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto.ItemUpdate.Types.UpdateType) input.ReadEnum();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Proto.ItemInfo();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ItemUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum UpdateType {
        Add = 0,
        Delete = 1,
        Update = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///库存对象
  /// </summary>
  public sealed class InventoryInfo : pb::IMessage {
    private static readonly pb::MessageParser<InventoryInfo> _parser = new pb::MessageParser<InventoryInfo>(() => new InventoryInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 1;
    private int capacity_;
    /// <summary>
    ///格子数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.ItemInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.ItemInfo> list_ = new pbc::RepeatedField<global::Proto.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ItemInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Capacity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Capacity);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Capacity = input.ReadInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拾取物品的请求
  /// </summary>
  public sealed class PickupItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<PickupItemRequest> _parser = new pb::MessageParser<PickupItemRequest>(() => new PickupItemRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickupItemRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    /// <summary>
    ///物品实体的entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询背包信息
  /// </summary>
  public sealed class InventoryRequest : pb::IMessage {
    private static readonly pb::MessageParser<InventoryRequest> _parser = new pb::MessageParser<InventoryRequest>(() => new InventoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "queryKnapsack" field.</summary>
    public const int QueryKnapsackFieldNumber = 2;
    private bool queryKnapsack_;
    /// <summary>
    ///是否查询背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryKnapsack {
      get { return queryKnapsack_; }
      set {
        queryKnapsack_ = value;
      }
    }

    /// <summary>Field number for the "queryWarehouse" field.</summary>
    public const int QueryWarehouseFieldNumber = 3;
    private bool queryWarehouse_;
    /// <summary>
    ///是否查询仓库
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryWarehouse {
      get { return queryWarehouse_; }
      set {
        queryWarehouse_ = value;
      }
    }

    /// <summary>Field number for the "queryEquipment" field.</summary>
    public const int QueryEquipmentFieldNumber = 4;
    private bool queryEquipment_;
    /// <summary>
    ///是否查询装备栏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryEquipment {
      get { return queryEquipment_; }
      set {
        queryEquipment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (QueryKnapsack != false) {
        output.WriteRawTag(16);
        output.WriteBool(QueryKnapsack);
      }
      if (QueryWarehouse != false) {
        output.WriteRawTag(24);
        output.WriteBool(QueryWarehouse);
      }
      if (QueryEquipment != false) {
        output.WriteRawTag(32);
        output.WriteBool(QueryEquipment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (QueryKnapsack != false) {
        size += 1 + 1;
      }
      if (QueryWarehouse != false) {
        size += 1 + 1;
      }
      if (QueryEquipment != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            QueryKnapsack = input.ReadBool();
            break;
          }
          case 24: {
            QueryWarehouse = input.ReadBool();
            break;
          }
          case 32: {
            QueryEquipment = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色的背包信息
  /// </summary>
  public sealed class InventoryResponse : pb::IMessage {
    private static readonly pb::MessageParser<InventoryResponse> _parser = new pb::MessageParser<InventoryResponse>(() => new InventoryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "knapsackInfo" field.</summary>
    public const int KnapsackInfoFieldNumber = 2;
    private global::Proto.InventoryInfo knapsackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.InventoryInfo KnapsackInfo {
      get { return knapsackInfo_; }
      set {
        knapsackInfo_ = value;
      }
    }

    /// <summary>Field number for the "warehouseInfo" field.</summary>
    public const int WarehouseInfoFieldNumber = 3;
    private global::Proto.InventoryInfo warehouseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.InventoryInfo WarehouseInfo {
      get { return warehouseInfo_; }
      set {
        warehouseInfo_ = value;
      }
    }

    /// <summary>Field number for the "equipmentInfo" field.</summary>
    public const int EquipmentInfoFieldNumber = 4;
    private global::Proto.InventoryInfo equipmentInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.InventoryInfo EquipmentInfo {
      get { return equipmentInfo_; }
      set {
        equipmentInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (knapsackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KnapsackInfo);
      }
      if (warehouseInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WarehouseInfo);
      }
      if (equipmentInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EquipmentInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (knapsackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KnapsackInfo);
      }
      if (warehouseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarehouseInfo);
      }
      if (equipmentInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipmentInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (knapsackInfo_ == null) {
              knapsackInfo_ = new global::Proto.InventoryInfo();
            }
            input.ReadMessage(knapsackInfo_);
            break;
          }
          case 26: {
            if (warehouseInfo_ == null) {
              warehouseInfo_ = new global::Proto.InventoryInfo();
            }
            input.ReadMessage(warehouseInfo_);
            break;
          }
          case 34: {
            if (equipmentInfo_ == null) {
              equipmentInfo_ = new global::Proto.InventoryInfo();
            }
            input.ReadMessage(equipmentInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品放置请求
  /// </summary>
  public sealed class ItemPlacementRequest : pb::IMessage {
    private static readonly pb::MessageParser<ItemPlacementRequest> _parser = new pb::MessageParser<ItemPlacementRequest>(() => new ItemPlacementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemPlacementRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "originIndex" field.</summary>
    public const int OriginIndexFieldNumber = 2;
    private int originIndex_;
    /// <summary>
    ///原始索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginIndex {
      get { return originIndex_; }
      set {
        originIndex_ = value;
      }
    }

    /// <summary>Field number for the "targetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    /// <summary>
    ///目标索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (OriginIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginIndex);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (OriginIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginIndex);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            OriginIndex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///丢弃的物品的请求
  /// </summary>
  public sealed class ItemDiscardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ItemDiscardRequest> _parser = new pb::MessageParser<ItemDiscardRequest>(() => new ItemDiscardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemDiscardRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "slotIndex" field.</summary>
    public const int SlotIndexFieldNumber = 2;
    private int slotIndex_;
    /// <summary>
    ///插槽索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///丢弃数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用物品的请求
  /// </summary>
  public sealed class ItemUseRequest : pb::IMessage {
    private static readonly pb::MessageParser<ItemUseRequest> _parser = new pb::MessageParser<ItemUseRequest>(() => new ItemUseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemUseRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    /// <summary>
    ///使用物品的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "slotIndex" field.</summary>
    public const int SlotIndexFieldNumber = 2;
    private int slotIndex_;
    /// <summary>
    ///使用哪个插槽的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
